package i.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class JwtUtils {

    // Using a secure key generated by the library
    private final SecretKey jwtSignKey = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    /**
     * Extracts the username from the JWT token.
     *
     * @param token JWT token
     * @return username extracted from the token
     */
    public String extractUsername(String token) {
        log.info("Extracting username from token.");
        return extractClaim(token, Claims::getSubject);
    }

    /**
     * Checks if the JWT token contains a specific claim.
     *
     * @param token the JWT token
     * @param claimName the claim name
     * @return true if the claim exists, false otherwise
     */
    public boolean hasClaim(String token, String claimName) {
        log.info("Checking if token has claim: {}", claimName);
        final Claims claims = extractAllClaims(token);
        return Objects.nonNull(claims.get(claimName));
    }

    /**
     * Extracts the expiration date from the JWT token.
     *
     * @param token the JWT token
     * @return the expiration date
     */
    public Date extractExpiration(String token) {
        log.info("Extracting expiration date from token.");
        return extractClaim(token, Claims::getExpiration);
    }

    /**
     * Extracts a claim from the JWT token.
     *
     * @param token the JWT token
     * @param claimsResolver function to extract the claim
     * @param <T> the type of the claim
     * @return the extracted claim
     */
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        log.info("Extracting claim from token.");
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    /**
     * Extracts all claims from the JWT token.
     *
     * @param token the JWT token
     * @return the claims
     */
    private Claims extractAllClaims(String token) {
        log.info("Extracting all claims from token.");
        return Jwts.parserBuilder()
                .setSigningKey(jwtSignKey) // Specify the signing key
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    /**
     * Checks if the JWT token is expired.
     *
     * @param token the JWT token
     * @return true if the token is expired, false otherwise
     */
    boolean isTokenExpired(String token) {
        log.info("Checking if token is expired.");
        return extractExpiration(token).before(new Date());
    }

    /**
     * Generates a new JWT token for the provided user details with custom claims.
     *
     * @param userDetails the user details
     * @param claims custom claims to be added to the token
     * @return the generated JWT token
     */
    public String generateToken(UserDetails userDetails, Map<String, Object> claims) {
        log.info("Generating token with custom claims.");
        return createToken(claims, userDetails);
    }

    /**
     * Generates a new JWT token for the provided user details with no custom claims.
     *
     * @param userDetails the user details
     * @return the generated JWT token
     */
    public String generateToken(UserDetails userDetails) {
        log.info("Generating token with default claims.");
        return createToken(new HashMap<>(), userDetails);
    }

    /**
     * Creates a JWT token with the provided claims and user details.
     *
     * @param claims the claims to be included in the token
     * @param userDetails the user details
     * @return the generated JWT token
     */
    public String createToken(Map<String, Object> claims, UserDetails userDetails) {
        log.info("Creating JWT token.");
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(userDetails.getUsername())
                .claim("authorities", userDetails.getAuthorities())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + TimeUnit.HOURS.toMillis(24)))
                .signWith(jwtSignKey) // Use the secure key value
                .compact();
    }

    /**
     * Validates the JWT token by comparing the username and checking if the token is expired.
     *
     * @param token the JWT token
     * @param userDetails the user details
     * @return true if the token is valid, false otherwise
     */
    public boolean isTokenValid(String token, UserDetails userDetails) {
        log.info("Validating token.");
        final String username = extractUsername(token);
        boolean isValid = username.equals(userDetails.getUsername()) && !isTokenExpired(token);
        log.info("Token validation result: {}", isValid);
        return isValid;
    }
}
